#include <errno.h>
#include <stdbool.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#include <arpa/inet.h>
#include <fcntl.h>
#include <netdb.h>
#include <netinet/in.h>
#include <strings.h>
#include <sys/select.h>
#include <sys/sendfile.h>
#include <sys/socket.h>
#include <sys/stat.h>
#include <sys/types.h>
#include <unistd.h>

/*
	COMP30023 project1: Image Tagger
	student name: qunzhi wang
	student ID: 900884
*/

// constants
static char const * const HTTP_200_FORMAT = "HTTP/1.1 200 OK\r\n\
Content-Type: text/html\r\n\
Content-Length: %ld\r\n\r\n";
static char const * const HTTP_400 = "HTTP/1.1 400 Bad Request\r\nContent-Length: 0\r\n\r\n";
static int const HTTP_400_LENGTH = 47;
static char const * const HTTP_404 = "HTTP/1.1 404 Not Found\r\nContent-Length: 0\r\n\r\n";
static int const HTTP_404_LENGTH = 45;
// html file names
static char const * const INTRO = "1_intro.html";
static char const * const START = "2_start.html";
static char const * const FIRSTTURN = "3_first_turn.html";
static char const * const ACCEPTED = "4_accepted.html";
static char const * const DISCARDED = "5_discarded.html";
static char const * const ENDGAME = "6_endgame.html";
static char const * const GAMEOVER = "7_gameover.html";

int p1_sockfd = -1;
int p2_sockfd = -1;
char player1[1024] = "";
char player2[1024] = "";

// represents three types of request method
typedef enum
{
    GET,
    POST,
    UNKNOWN
} METHOD;



/*
	send html file to the browser
*/
static bool sendHTMLpage(int sockfd, const char *const fileName)
{
	char buff[2049];	
	int n;
	// get the size of the file first;
	struct stat st;
	stat(fileName, &st);
	n = sprintf(buff, HTTP_200_FORMAT, st.st_size);
	// sned the heaeder first
	int filefd = open(fileName, O_RDONLY);
	if (write(sockfd, buff, n) < 0)
	{
		perror("write");
        return false;
    }
    do
    {
    	n = sendfile(sockfd, filefd, NULL, 2048);
    }
    while (n > 0);
    if (n < 0)
    {
    	perror("sendfile");
    	close(filefd);
        return false;
    }
    close(filefd);
    return true;
}

static bool post_userName(int sockfd, char *buff) 
{
	char * username = strstr(buff, "user=") + 5;
	int username_length = strlen(username);
	
	if (p1_sockfd == -1) 
	{
		p1_sockfd = sockfd;
		strcpy(player1, username);	
	}
	else if (p2_sockfd == -1)
	{
		p2_sockfd = sockfd;
		strcpy(player2, username);
	}
	else 
		return false;
	if (sendHTMLpage(sockfd, START))
	{
		return true;	
	}
	return false;	
}


/*
	this function is adapted from the sample code on LMS, http-server.c,
	and some changes are made.
*/
static bool handle_http_request(int sockfd)
{
	// try to read the request
    char buff[2049];
    int n = read(sockfd, buff, 2049);
    if (n <= 0)
    {
        if (n < 0)
            perror("read");
        else
            printf("socket %d close the connection\n", sockfd);
        return false;
    }
	
    // terminate the string
    buff[n] = 0;
	
    char * req = buff;
    
    // parse the requestion method
    METHOD method = UNKNOWN;
    if (strncmp(req, "GET ", 4) == 0)
    {
        req += 4;
        method = GET;
    }
    else if (strncmp(req, "POST ", 5) == 0)
    {
        req += 5;
        method = POST;
    }
    else if (write(sockfd, HTTP_400, HTTP_400_LENGTH) < 0)
    {
        perror("write");
        return false;
    }
    
        // sanitise the URI
    while (*req == '.' || *req == '/')
        ++req;
    if (*req == ' ')
        if (method == GET)
        {
            return sendHTMLpage(sockfd, INTRO);
        }
        else if (method == POST)
        {
            return post_userName(sockfd, req);
        }
        else
            // never used, just for completeness
            fprintf(stderr, "no other methods supported");
    // send 404
    else if (write(sockfd, HTTP_404, HTTP_404_LENGTH) < 0)
    {
        perror("write");
        return false;
    }
	return true;	
}

/* 
	The main function here is adapted from the sample code, http-server.c,
	provided on LMS
*/
int main(int argc, char * argv[])
{
    if (argc < 3)
    {
        fprintf(stderr, "usage: %s ip port\n", argv[0]);
        return 0;
    }
    printf("image_tagger server is now running at IP: %s on port %s\n", argv[1], argv[2]);

    // create TCP socket which only accept IPv4
    int sockfd = socket(AF_INET, SOCK_STREAM, 0);
    if (sockfd < 0)
    {
        perror("socket");
        exit(EXIT_FAILURE);
    }

    // reuse the socket if possible
    int const reuse = 1;
    if (setsockopt(sockfd, SOL_SOCKET, SO_REUSEADDR, &reuse, sizeof(int)) < 0)
    {
        perror("setsockopt");
        exit(EXIT_FAILURE);
    }

    // create and initialise address we will listen on
    struct sockaddr_in serv_addr;
    bzero(&serv_addr, sizeof(serv_addr));
    serv_addr.sin_family = AF_INET;
    // if ip parameter is not specified
    serv_addr.sin_addr.s_addr = inet_addr(argv[1]);
    serv_addr.sin_port = htons(atoi(argv[2]));

    // bind address to socket
    if (bind(sockfd, (struct sockaddr *)&serv_addr, sizeof(serv_addr)) < 0)
    {
        perror("bind");
        exit(EXIT_FAILURE);
    }

    // listen on the socket
    listen(sockfd, 5);

    // initialise an active file descriptors set
    fd_set masterfds;
    FD_ZERO(&masterfds);
    FD_SET(sockfd, &masterfds);
    // record the maximum socket number
    int maxfd = sockfd;
    

    while (1)
    {
        // monitor file descriptors
        fd_set readfds = masterfds;
        if (select(FD_SETSIZE, &readfds, NULL, NULL, NULL) < 0)
        {
            perror("select");
            exit(EXIT_FAILURE);
        }

        // loop all possible descriptor
        for (int i = 0; i <= maxfd; ++i)
            // determine if the current file descriptor is active
            if (FD_ISSET(i, &readfds))
            {
                // create new socket if there is new incoming connection request
                if (i == sockfd)
                {
                    struct sockaddr_in cliaddr;
                    socklen_t clilen = sizeof(cliaddr);
                    int newsockfd = accept(sockfd, (struct sockaddr *)&cliaddr, &clilen);
                    if (newsockfd < 0)
                        perror("accept");
                    else
                    {
                        // add the socket to the set
                        FD_SET(newsockfd, &masterfds);
                        // update the maximum tracker
                        if (newsockfd > maxfd)
                            maxfd = newsockfd;
                        // print out the IP and the socket number
                        char ip[INET_ADDRSTRLEN];
                        printf(
                            "new connection from %s on socket %d\n",
                            // convert to human readable string
                            inet_ntop(cliaddr.sin_family, &cliaddr.sin_addr, ip, INET_ADDRSTRLEN),
                            newsockfd
                        );
                    }
                }
                // a request is sent from the client
                else if (!handle_http_request(i))
                {
                    close(i);
                    FD_CLR(i, &masterfds);
                }
            }
    }

    return 0;
}
